// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: composers.sql

package repository

import (
	"context"
)

const getAllComposers = `-- name: GetAllComposers :many
SELECT id, name FROM composers
ORDER BY name
`

func (q *Queries) GetAllComposers(ctx context.Context) ([]Composer, error) {
	rows, err := q.db.QueryContext(ctx, getAllComposers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Composer
	for rows.Next() {
		var i Composer
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComposer = `-- name: GetComposer :one
SELECT id, name FROM composers
WHERE id = ? LIMIT 1
`

func (q *Queries) GetComposer(ctx context.Context, id int64) (Composer, error) {
	row := q.db.QueryRowContext(ctx, getComposer, id)
	var i Composer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
